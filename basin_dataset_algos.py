# -*- coding: utf-8 -*-
"""Basin_Dataset_Algos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D9d-23VUQ0z915d0RgnN_FbkUWRRvjPj
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import MinMaxScaler
from sklearn import metrics
from sklearn.metrics import confusion_matrix
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB

data_Br = pd.read_csv("dataset_Br.csv")
data_Ga = pd.read_csv("dataset_Ga.csv")
data_Me = pd.read_csv("dataset_Me.csv")
data_SEH = pd.read_csv("dataset_SEH.csv")

data_Br.drop(columns=["Unnamed: 0", "Area_threshold", "Wind_dir", "Cloud_amt"], inplace = True)
data_Ga.drop(columns=["Unnamed: 0", "Area_threshold", "Wind_dir", "Cloud_amt"], inplace = True)
data_Me.drop(columns=["Unnamed: 0", "Area_threshold", "Wind_dir", "Cloud_amt"], inplace = True)
data_SEH.drop(columns=["Unnamed: 0", "Area_threshold", "Wind_dir", "Cloud_amt"], inplace = True)

feature_Br = data_Br[["Rainfall", "Humidity", "Tmax", "Tmin", "Tavg", "max_wl", "min_wl", 'avg_wl', "Wind_dir_encoded"]]
label_Br = data_Br[["Flood"]]
feature_Ga = data_Ga[["Rainfall", "Humidity", "Tmax", "Tmin", "Tavg", "max_wl", "min_wl", 'avg_wl', "Wind_dir_encoded"]]
label_Ga = data_Ga[["Flood"]]
feature_Me = data_Me[["Rainfall", "Humidity", "Tmax", "Tmin", "Tavg", "max_wl", "min_wl", 'avg_wl', "Wind_dir_encoded"]]
label_Me = data_Me[["Flood"]]
feature_SEH = data_SEH[["Rainfall", "Humidity", "Tmax", "Tmin", "Tavg", "max_wl", "min_wl", 'avg_wl', "Wind_dir_encoded"]]
label_SEH = data_SEH[["Flood"]]

stratY_Br = pd.DataFrame(label_Br)
stratY_Ga = pd.DataFrame(label_Ga)
stratY_Me = pd.DataFrame(label_Me)
stratY_SEH = pd.DataFrame(label_SEH)
XX_Br = feature_Br.values
XX_Ga = feature_Ga.values
XX_Me = feature_Me.values
XX_SEH = feature_SEH.values
YY_Br = label_Br.values
YY_Ga = label_Ga.values
YY_Me = label_Me.values
YY_SEH = label_SEH.values
X_trainBr, X_testBr, y_trainBr, y_testBr = train_test_split(XX_Br, YY_Br, test_size = 0.25, stratify=stratY_Br, random_state=0)
X_trainGa, X_testGa, y_trainGa, y_testGa = train_test_split(XX_Ga, YY_Ga, test_size = 0.25, stratify=stratY_Ga, random_state=0)
X_trainMe, X_testMe, y_trainMe, y_testMe = train_test_split(XX_Me, YY_Me, test_size = 0.25, stratify=stratY_Me, random_state=0)
X_trainSEH, X_testSEH, y_trainSEH, y_testSEH = train_test_split(XX_SEH, YY_SEH, test_size = 0.25, stratify=stratY_SEH, random_state=0)

"""## Decision Tree Classifier"""

dtc_Br = DecisionTreeClassifier(criterion='entropy',random_state=1)
dtc_Ga = DecisionTreeClassifier(criterion='entropy',random_state=1)
dtc_Me = DecisionTreeClassifier(criterion='entropy',random_state=1)
dtc_SEH = DecisionTreeClassifier(criterion='entropy',random_state=1)

dtc_Br.fit(X_trainBr,y_trainBr)
y_pred_dtc_Br = dtc_Br.predict(X_testBr)
print("Precision: %.3f" % precision_score(y_testBr, y_pred_dtc_Br))
print("Recall: %.3f" % recall_score(y_testBr, y_pred_dtc_Br))
print("Accuracy for Decision Tree Classifier for Brahmaputra Basin = {:.3f}".format(dtc_Br.score(X_testBr, y_testBr)))
print("Error for Decision Tree Classifier for Brahmaputra Basin = {:.3f}".format(1-dtc_Br.score(X_testBr, y_testBr)))

dtc_Ga.fit(X_trainGa,y_trainGa)
y_pred_dtc_Ga = dtc_Ga.predict(X_testGa)
print("Precision: %.3f" % precision_score(y_testGa, y_pred_dtc_Ga))
print("Recall: %.3f" % recall_score(y_testGa, y_pred_dtc_Ga))
print("Accuracy for Decision Tree Classifier for Ganges Basin = {:.3f}".format(dtc_Ga.score(X_testGa, y_testGa)))
print("Error for Decision Tree Classifier for Ganges Basin = {:.3f}".format(1-dtc_Ga.score(X_testGa, y_testGa)))

dtc_Me.fit(X_trainMe,y_trainMe)
y_pred_dtc_Me = dtc_Me.predict(X_testMe)
print("Precision: %.3f" % precision_score(y_testMe, y_pred_dtc_Me))
print("Recall: %.3f" % recall_score(y_testMe, y_pred_dtc_Me))
print("Accuracy for Decision Tree Classifier for Meghna Basin = {:.3f}".format(dtc_Me.score(X_testMe, y_testMe)))
print("Error for Decision Tree Classifier for Meghna Basin = {:.3f}".format(1-dtc_Me.score(X_testMe, y_testMe)))

dtc_SEH.fit(X_trainSEH,y_trainSEH)
y_pred_dtc_SEH = dtc_SEH.predict(X_testSEH)
print("Precision: %.3f" % precision_score(y_testSEH, y_pred_dtc_SEH))
print("Recall: %.3f" % recall_score(y_testSEH, y_pred_dtc_SEH))
print("Accuracy for Decision Tree Classifier for SE Hill Basin = {:.3f}".format(dtc_SEH.score(X_testSEH, y_testSEH)))
print("Error for Decision Tree Classifier for SE Hill Basin = {:.3f}".format(1-dtc_SEH.score(X_testSEH, y_testSEH)))

y_pred_dtc_Br = dtc_Br.predict(X_trainBr)
LABELS = ['Flood', 'No Flood']

conf_matrix = confusion_matrix(y_trainBr, y_pred_dtc_Br)

plt.figure(figsize =(5, 5))

sns.heatmap(conf_matrix, xticklabels = LABELS,

			yticklabels = LABELS, annot = True, fmt ="d");

plt.title("Confusion matrix: [Decision Tree Classifier For Brahmaputra Basin]")

plt.ylabel('True class')

plt.xlabel('Predicted class')
plt.rcParams.update({'font.size': 10})
plt.show()

y_pred_dtc_Ga = dtc_Ga.predict(X_trainGa)
LABELS = ['Flood', 'No Flood']

conf_matrix = confusion_matrix(y_trainGa, y_pred_dtc_Ga)

plt.figure(figsize =(5, 5))

sns.heatmap(conf_matrix, xticklabels = LABELS,

			yticklabels = LABELS, annot = True, fmt ="d");

plt.title("Confusion matrix: [Decision Tree Classifier For Ganges Basin]")

plt.ylabel('True class')

plt.xlabel('Predicted class')
plt.rcParams.update({'font.size': 10})
plt.show()

y_pred_dtc_Me = dtc_Me.predict(X_trainMe)
LABELS = ['Flood', 'No Flood']

conf_matrix = confusion_matrix(y_trainMe, y_pred_dtc_Me)

plt.figure(figsize =(5, 5))

sns.heatmap(conf_matrix, xticklabels = LABELS,

			yticklabels = LABELS, annot = True, fmt ="d");

plt.title("Confusion matrix: [Decision Tree Classifier For Meghna Basin]")

plt.ylabel('True class')

plt.xlabel('Predicted class')
plt.rcParams.update({'font.size': 10})
plt.show()

y_pred_dtc_SEH = dtc_SEH.predict(X_trainSEH)
LABELS = ['Flood', 'No Flood']

conf_matrix = confusion_matrix(y_trainSEH, y_pred_dtc_SEH)

plt.figure(figsize =(5, 5))

sns.heatmap(conf_matrix, xticklabels = LABELS,

			yticklabels = LABELS, annot = True, fmt ="d");

plt.title("Confusion matrix: [Decision Tree Classifier For SE Hill Basin]")

plt.ylabel('True class')

plt.xlabel('Predicted class')
plt.rcParams.update({'font.size': 10})
plt.show()

"""## K-Nearest Neighbours Classifier"""

knn_Br = KNeighborsClassifier(n_neighbors=1)
knn_Ga = KNeighborsClassifier(n_neighbors=1)
knn_Me = KNeighborsClassifier(n_neighbors=1)
knn_SEH = KNeighborsClassifier(n_neighbors=1)

knn_Br.fit(X_trainBr,y_trainBr.ravel())
y_pred_knn_Br = knn_Br.predict(X_testBr)
print("Precision: %.3f" % precision_score(y_testBr, y_pred_knn_Br))
print("Recall: %.3f" % recall_score(y_testBr, y_pred_knn_Br))
print("Accuracy for KNeighbours Classifier for Brahmaputra Basin = {:.3f}".format(knn_Br.score(X_testBr, y_testBr)))
print("Error for KNeighbours Classifier for Brahmaputra Basin = {:.3f}".format(1-knn_Br.score(X_testBr, y_testBr)))

knn_Ga.fit(X_trainGa,y_trainGa.ravel())
y_pred_knn_Ga = knn_Ga.predict(X_testGa)
print("Precision: %.3f" % precision_score(y_testGa, y_pred_knn_Ga))
print("Recall: %.3f" % recall_score(y_testGa, y_pred_knn_Ga))
print("Accuracy for KNeighbours Classifier for Ganges Basin = {:.3f}".format(knn_Ga.score(X_testGa, y_testGa)))
print("Error for KNeighbours Classifier for Ganges Basin = {:.3f}".format(1-knn_Ga.score(X_testGa, y_testGa)))

knn_Me.fit(X_trainMe,y_trainMe.ravel())
y_pred_knn_Me = knn_Me.predict(X_testMe)
print("Precision: %.3f" % precision_score(y_testMe, y_pred_knn_Me))
print("Recall: %.3f" % recall_score(y_testMe, y_pred_knn_Me))
print("Accuracy for KNeighbours Classifier for Meghna Basin = {:.3f}".format(knn_Me.score(X_testMe, y_testMe)))
print("Error for KNeighbours Classifier for Meghna Basin = {:.3f}".format(1-knn_Me.score(X_testMe, y_testMe)))

knn_SEH.fit(X_trainSEH,y_trainSEH.ravel())
y_pred_knn_SEH = knn_SEH.predict(X_testSEH)
print("Precision: %.3f" % precision_score(y_testSEH, y_pred_knn_SEH))
print("Recall: %.3f" % recall_score(y_testSEH, y_pred_knn_SEH))
print("Accuracy for KNeighbours Classifier for SE Hill Basin = {:.3f}".format(knn_SEH.score(X_testSEH, y_testSEH)))
print("Error for KNeighbours Classifier for SE Hill Basin = {:.3f}".format(1-knn_SEH.score(X_testSEH, y_testSEH)))

y_pred_knn_Br = knn_Br.predict(X_trainBr)
LABELS = ['Flood', 'No Flood']

conf_matrix = confusion_matrix(y_trainBr, y_pred_knn_Br)

plt.figure(figsize =(5, 5))

sns.heatmap(conf_matrix, xticklabels = LABELS,

			yticklabels = LABELS, annot = True, fmt ="d");

plt.title("Confusion matrix: [KNeighbours Classifier For Brahmaputra Basin]")

plt.ylabel('True class')

plt.xlabel('Predicted class')
plt.rcParams.update({'font.size': 10})
plt.show()

y_pred_knn_Ga = knn_Ga.predict(X_trainGa)
LABELS = ['Flood', 'No Flood']

conf_matrix = confusion_matrix(y_trainGa, y_pred_knn_Ga)

plt.figure(figsize =(5, 5))

sns.heatmap(conf_matrix, xticklabels = LABELS,

			yticklabels = LABELS, annot = True, fmt ="d");

plt.title("Confusion matrix: [KNeighbours Classifier For Ganges Basin]")

plt.ylabel('True class')

plt.xlabel('Predicted class')
plt.rcParams.update({'font.size': 10})
plt.show()

y_pred_knn_Me = knn_Me.predict(X_trainMe)
LABELS = ['Flood', 'No Flood']

conf_matrix = confusion_matrix(y_trainMe, y_pred_knn_Me)

plt.figure(figsize =(5, 5))

sns.heatmap(conf_matrix, xticklabels = LABELS,

			yticklabels = LABELS, annot = True, fmt ="d");

plt.title("Confusion matrix: [KNeighbours Classifier For Meghna Basin]")

plt.ylabel('True class')

plt.xlabel('Predicted class')
plt.rcParams.update({'font.size': 10})
plt.show()

y_pred_knn_SEH = knn_SEH.predict(X_trainSEH)
LABELS = ['Flood', 'No Flood']

conf_matrix = confusion_matrix(y_trainSEH, y_pred_knn_SEH)

plt.figure(figsize =(5, 5))

sns.heatmap(conf_matrix, xticklabels = LABELS,

			yticklabels = LABELS, annot = True, fmt ="d");

plt.title("Confusion matrix: [KNeighbours Classifier For SE Hill Basin]")

plt.ylabel('True class')

plt.xlabel('Predicted class')
plt.rcParams.update({'font.size': 10})
plt.show()

"""## Logistic Regression"""

lrm_Br = LogisticRegression(max_iter=500)
lrm_Ga = LogisticRegression(max_iter=500)
lrm_Me = LogisticRegression(max_iter=500)
lrm_SEH = LogisticRegression( max_iter=500)

lrm_Br.fit(X_trainBr,y_trainBr.ravel())
y_pred_lrm_Br = lrm_Br.predict(X_testBr)
print("Precision: %.3f" % precision_score(y_testBr, y_pred_lrm_Br))
print("Recall: %.3f" % recall_score(y_testBr, y_pred_lrm_Br))
print("Accuracy for Logistic Regression for Brahmaputra Basin = {:.3f}".format(lrm_Br.score(X_testBr, y_testBr)))
print("Error for Logistic Regression for Brahmaputra Basin = {:.3f}".format(1-lrm_Br.score(X_testBr, y_testBr)))

lrm_Ga.fit(X_trainGa,y_trainGa.ravel())
y_pred_lrm_Ga = lrm_Ga.predict(X_testGa)
print("Precision: %.3f" % precision_score(y_testGa, y_pred_lrm_Ga))
print("Recall: %.3f" % recall_score(y_testGa, y_pred_lrm_Ga))
print("Accuracy for Logistic Regression for Ganges Basin = {:.3f}".format(lrm_Ga.score(X_testGa, y_testGa)))
print("Error for Logistic Regression for Ganges Basin = {:.3f}".format(1-lrm_Ga.score(X_testGa, y_testGa)))

lrm_Me.fit(X_trainMe,y_trainMe.ravel())
y_pred_lrm_Me = lrm_Me.predict(X_testMe)
print("Precision: %.3f" % precision_score(y_testMe, y_pred_lrm_Me))
print("Recall: %.3f" % recall_score(y_testMe, y_pred_lrm_Me))
print("Accuracy for Logistic Regression for Meghna Basin = {:.3f}".format(lrm_Me.score(X_testMe, y_testMe)))
print("Error for Logistic Regression for Meghna Basin = {:.3f}".format(1-lrm_Me.score(X_testMe, y_testMe)))

lrm_SEH.fit(X_trainSEH,y_trainSEH.ravel())
y_pred_lrm_SEH = lrm_SEH.predict(X_testSEH)
print("Precision: %.3f" % precision_score(y_testSEH, y_pred_lrm_SEH))
print("Recall: %.3f" % recall_score(y_testSEH, y_pred_lrm_SEH))
print("Accuracy for Logistic Regression for SE Hill Basin = {:.3f}".format(lrm_SEH.score(X_testSEH, y_testSEH)))
print("Error for Logistic Regression for SE Hill Basin = {:.3f}".format(1-lrm_SEH.score(X_testSEH, y_testSEH)))

y_pred_lrm_Br = lrm_Br.predict(X_trainBr)
LABELS = ['Flood', 'No Flood']

conf_matrix = confusion_matrix(y_trainBr, y_pred_lrm_Br)

plt.figure(figsize =(5, 5))

sns.heatmap(conf_matrix, xticklabels = LABELS,

			yticklabels = LABELS, annot = True, fmt ="d");

plt.title("Confusion matrix: [Logistic Regression For Brahmaputra Basin]")

plt.ylabel('True class')

plt.xlabel('Predicted class')
plt.rcParams.update({'font.size': 10})
plt.show()

y_pred_lrm_Ga = lrm_Ga.predict(X_trainGa)
LABELS = ['Flood', 'No Flood']

conf_matrix = confusion_matrix(y_trainGa, y_pred_lrm_Ga)

plt.figure(figsize =(5, 5))

sns.heatmap(conf_matrix, xticklabels = LABELS,

			yticklabels = LABELS, annot = True, fmt ="d");

plt.title("Confusion matrix: [Logistic Regression For Ganges Basin]")

plt.ylabel('True class')

plt.xlabel('Predicted class')
plt.rcParams.update({'font.size': 10})
plt.show()

y_pred_lrm_Me = lrm_Me.predict(X_trainMe)
LABELS = ['Flood', 'No Flood']

conf_matrix = confusion_matrix(y_trainMe, y_pred_lrm_Me)

plt.figure(figsize =(5, 5))

sns.heatmap(conf_matrix, xticklabels = LABELS,

			yticklabels = LABELS, annot = True, fmt ="d");

plt.title("Confusion matrix: [Logistic Regression For Meghna Basin]")

plt.ylabel('True class')

plt.xlabel('Predicted class')
plt.rcParams.update({'font.size': 10})
plt.show()

y_pred_lrm_SEH = lrm_SEH.predict(X_trainSEH)
LABELS = ['Flood', 'No Flood']

conf_matrix = confusion_matrix(y_trainSEH, y_pred_lrm_SEH)

plt.figure(figsize =(5, 5))

sns.heatmap(conf_matrix, xticklabels = LABELS,

			yticklabels = LABELS, annot = True, fmt ="d");

plt.title("Confusion matrix: [Logistic Regression For SE Hill Basin]")

plt.ylabel('True class')

plt.xlabel('Predicted class')
plt.rcParams.update({'font.size': 10})
plt.show()

"""## Naive Bayes"""

gnb_Br = GaussianNB()
gnb_Ga = GaussianNB()
gnb_Me = GaussianNB()
gnb_SEH = GaussianNB()

gnb_Br.fit(X_trainBr,y_trainBr.ravel())
y_pred_gnb_Br = gnb_Br.predict(X_testBr)
print("Precision: %.3f" % precision_score(y_testBr, y_pred_gnb_Br))
print("Recall: %.3f" % recall_score(y_testBr, y_pred_gnb_Br))
print("Accuracy for Gaussian Naive Bayes for Brahmaputra Basin = {:.3f}".format(gnb_Br.score(X_testBr, y_testBr)))
print("Error for Gaussian Naive Bayes for Brahmaputra Basin = {:.3f}".format(1-gnb_Br.score(X_testBr, y_testBr)))

gnb_Ga.fit(X_trainGa,y_trainGa.ravel())
y_pred_gnb_Ga = gnb_Ga.predict(X_testGa)
print("Precision: %.3f" % precision_score(y_testGa, y_pred_gnb_Ga))
print("Recall: %.3f" % recall_score(y_testGa, y_pred_gnb_Ga))
print("Accuracy for Gaussian Naive Bayes for Ganges Basin = {:.3f}".format(gnb_Ga.score(X_testGa, y_testGa)))
print("Error for Gaussian Naive Bayes for Ganges Basin = {:.3f}".format(1-gnb_Ga.score(X_testGa, y_testGa)))

gnb_Me.fit(X_trainMe,y_trainMe.ravel())
y_pred_gnb_Me = gnb_Me.predict(X_testMe)
print("Precision: %.3f" % precision_score(y_testMe, y_pred_gnb_Me))
print("Recall: %.3f" % recall_score(y_testMe, y_pred_gnb_Me))
print("Accuracy for Gaussian Naive Bayes for Meghna Basin = {:.3f}".format(gnb_Me.score(X_testMe, y_testMe)))
print("Error for Gaussian Naive Bayes for Meghna Basin = {:.3f}".format(1-gnb_Me.score(X_testMe, y_testMe)))

gnb_SEH.fit(X_trainSEH,y_trainSEH.ravel())
y_pred_gnb_SEH = gnb_SEH.predict(X_testSEH)
print("Precision: %.3f" % precision_score(y_testSEH, y_pred_gnb_SEH))
print("Recall: %.3f" % recall_score(y_testSEH, y_pred_gnb_SEH))
print("Accuracy for Gaussian Naive Bayes for SE Hill Basin = {:.3f}".format(gnb_SEH.score(X_testSEH, y_testSEH)))
print("Error for Gaussian Naive Bayes for SE Hill Basin = {:.3f}".format(1-gnb_SEH.score(X_testSEH, y_testSEH)))

y_pred_gnb_Br = gnb_Br.predict(X_trainBr)
LABELS = ['Flood', 'No Flood']

conf_matrix = confusion_matrix(y_trainBr, y_pred_gnb_Br)

plt.figure(figsize =(5, 5))

sns.heatmap(conf_matrix, xticklabels = LABELS,

			yticklabels = LABELS, annot = True, fmt ="d");

plt.title("Confusion matrix: [Gaussian Naive Bayes For Brahmaputra Basin]")

plt.ylabel('True class')

plt.xlabel('Predicted class')
plt.rcParams.update({'font.size': 10})
plt.show()

y_pred_gnb_Ga = gnb_Ga.predict(X_trainGa)
LABELS = ['Flood', 'No Flood']

conf_matrix = confusion_matrix(y_trainGa, y_pred_gnb_Ga)

plt.figure(figsize =(5, 5))

sns.heatmap(conf_matrix, xticklabels = LABELS,

			yticklabels = LABELS, annot = True, fmt ="d");

plt.title("Confusion matrix: [Gaussian Naive Bayes For Ganges Basin]")

plt.ylabel('True class')

plt.xlabel('Predicted class')
plt.rcParams.update({'font.size': 10})
plt.show()

y_pred_gnb_Me = gnb_Me.predict(X_trainMe)
LABELS = ['Flood', 'No Flood']

conf_matrix = confusion_matrix(y_trainMe, y_pred_gnb_Me)

plt.figure(figsize =(5, 5))

sns.heatmap(conf_matrix, xticklabels = LABELS,

			yticklabels = LABELS, annot = True, fmt ="d");

plt.title("Confusion matrix: [Gaussian Naive Bayes For Meghna Basin]")

plt.ylabel('True class')

plt.xlabel('Predicted class')
plt.rcParams.update({'font.size': 10})
plt.show()

y_pred_gnb_SEH = gnb_SEH.predict(X_trainSEH)
LABELS = ['Flood', 'No Flood']

conf_matrix = confusion_matrix(y_trainSEH, y_pred_gnb_SEH)

plt.figure(figsize =(5, 5))

sns.heatmap(conf_matrix, xticklabels = LABELS,

			yticklabels = LABELS, annot = True, fmt ="d");

plt.title("Confusion matrix: [Gaussian Naive Bayes For SE Hill Basin]")

plt.ylabel('True class')

plt.xlabel('Predicted class')
plt.rcParams.update({'font.size': 10})
plt.show()

"""## Random Forest Classifier"""

raf_Br = RandomForestClassifier()
raf_Ga = RandomForestClassifier()
raf_Me = RandomForestClassifier()
raf_SEH = RandomForestClassifier()

raf_Br.fit(X_trainBr,y_trainBr.ravel())
y_pred_raf_Br = raf_Br.predict(X_testBr)
print("Precision: %.3f" % precision_score(y_testBr, y_pred_raf_Br))
print("Recall: %.3f" % recall_score(y_testBr, y_pred_raf_Br))
print("Accuracy for Random Forest for Brahmaputra Basin = {:.3f}".format(raf_Br.score(X_testBr, y_testBr)))
print("Error for Random Forest for Brahmaputra Basin = {:.3f}".format(1-raf_Br.score(X_testBr, y_testBr)))

raf_Ga.fit(X_trainGa,y_trainGa.ravel())
y_pred_raf_Ga = raf_Ga.predict(X_testGa)
print("Precision: %.3f" % precision_score(y_testGa, y_pred_raf_Ga))
print("Recall: %.3f" % recall_score(y_testGa, y_pred_raf_Ga))
print("Accuracy for Random Forest for Ganges Basin = {:.3f}".format(raf_Ga.score(X_testGa, y_testGa)))
print("Error for Random Forest for Ganges Basin = {:.3f}".format(1-raf_Ga.score(X_testGa, y_testGa)))

raf_Me.fit(X_trainMe,y_trainMe.ravel())
y_pred_raf_Me = raf_Me.predict(X_testMe)
print("Precision: %.3f" % precision_score(y_testMe, y_pred_raf_Me))
print("Recall: %.3f" % recall_score(y_testMe, y_pred_raf_Me))
print("Accuracy for Random Forest for Meghna Basin = {:.3f}".format(raf_Me.score(X_testMe, y_testMe)))
print("Error for Random Forest for Meghna Basin = {:.3f}".format(1-raf_Me.score(X_testMe, y_testMe)))

raf_SEH.fit(X_trainSEH,y_trainSEH.ravel())
y_pred_raf_SEH = raf_SEH.predict(X_testSEH)
print("Precision: %.3f" % precision_score(y_testSEH, y_pred_raf_SEH))
print("Recall: %.3f" % recall_score(y_testSEH, y_pred_raf_SEH))
print("Accuracy for Random Forest for SE Hill Basin = {:.3f}".format(raf_SEH.score(X_testSEH, y_testSEH)))
print("Error for Random Forest for SE Hill Basin = {:.3f}".format(1-raf_SEH.score(X_testSEH, y_testSEH)))

y_pred_raf_Br = raf_Br.predict(X_trainBr)
LABELS = ['Flood', 'No Flood']

conf_matrix = confusion_matrix(y_trainBr, y_pred_raf_Br)

plt.figure(figsize =(5, 5))

sns.heatmap(conf_matrix, xticklabels = LABELS,

			yticklabels = LABELS, annot = True, fmt ="d");

plt.title("Confusion matrix: [Random Forest For Brahmaputra Basin]")

plt.ylabel('True class')

plt.xlabel('Predicted class')
plt.rcParams.update({'font.size': 10})
plt.show()

y_pred_raf_Ga = raf_Ga.predict(X_trainGa)
LABELS = ['Flood', 'No Flood']

conf_matrix = confusion_matrix(y_trainGa, y_pred_raf_Ga)

plt.figure(figsize =(5, 5))

sns.heatmap(conf_matrix, xticklabels = LABELS,

			yticklabels = LABELS, annot = True, fmt ="d");

plt.title("Confusion matrix: [Random Forest For Ganges Basin]")

plt.ylabel('True class')

plt.xlabel('Predicted class')
plt.rcParams.update({'font.size': 10})
plt.show()

y_pred_raf_Me = raf_Me.predict(X_trainMe)
LABELS = ['Flood', 'No Flood']

conf_matrix = confusion_matrix(y_trainMe, y_pred_raf_Me)

plt.figure(figsize =(5, 5))

sns.heatmap(conf_matrix, xticklabels = LABELS,

			yticklabels = LABELS, annot = True, fmt ="d");

plt.title("Confusion matrix: [Random Forest For Meghna Basin]")

plt.ylabel('True class')

plt.xlabel('Predicted class')
plt.rcParams.update({'font.size': 10})
plt.show()

y_pred_raf_SEH = raf_SEH.predict(X_trainSEH)
LABELS = ['Flood', 'No Flood']

conf_matrix = confusion_matrix(y_trainSEH, y_pred_raf_SEH)

plt.figure(figsize =(5, 5))

sns.heatmap(conf_matrix, xticklabels = LABELS,

			yticklabels = LABELS, annot = True, fmt ="d");

plt.title("Confusion matrix: [Random Forest For SE Hill Basin]")

plt.ylabel('True class')

plt.xlabel('Predicted class')
plt.rcParams.update({'font.size': 10})
plt.show()